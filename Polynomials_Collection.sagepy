from sage.all import *
from itertools import product


# A generator for index sets like(i0,i1,...,in) with range.
# variable_range is a tuple for the range
# Input (1, 2), (1, 2) Output((1, 1), (1, 2), (2, 1), (2, 2))
def index_set_generate(* variable_range):
    dimension_ranges = []
    for i in range(len(variable_range)):
        dimension_ranges.append(range(variable_range[i][0],variable_range[i][1] + 1))
    vectors = tuple(product(* dimension_ranges))
    return vectors


# Generate variables on polynomialrings,input the number of variables and the modular number
# Output a tuple for variables like (x0, x1, x2)
def variable_generate(variable_num, modular_number):
    P = PolynomialRing(Zmod(modular_number), variable_num, 'x', order = 'invlex')
    x = P.gens()
    return x


# Generate monomials with coefficients and times
# input tuple like(25,1,4,2,6) Output 25*x1^4*x2^6
def monomials_generate(monomials_parameter, variable_list):
    monomial = monomials_parameter[0]
    for i in range(1, len(monomials_parameter), 2):
        monomial *= (variable_list[monomials_parameter[i]] ** monomials_parameter[i + 1])
    return monomial


# Generate equations based on the monomials collections
def equation_generate(* monomials_collection):
    equations = 0
    for i in range(len(monomials_collection)):
        equations += monomials_collection[i]
    return equations



# print(index_set_generate((1, 2), (2, 4), (3, 4)))
# print(variable_generate(5,59))
# print(monomials_generate((25,1,4,2,6),variable_generate(5,59)))
# print(equation_generate(monomials_generate((25,1,4,2,6),variable_generate(5,59)),monomials_generate((25,1,4,3,6),variable_generate(5,59))))